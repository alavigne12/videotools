#!/bin/bash

config_file="$HOME/.$(basename "${0}").conf"
touch $config_file
source $config_file

usage(){
    echo "usage"
    
}

_error_exit(){
    echo -e "\033[1;32m"$1"\033[0m" 1>&2
    exit 1
}

file_input=$1

OPTIND=1
while getopts "hep:c:" opt ; do
    case "${opt}" in
        h) usage ;;
        e) runtype="edit";;
        c) runtype="crop" file_input="$2";;
        *)
    esac
done

if [ "${*}" = "" ] ; then
    usage
fi

if [[ "${runtype}" = "edit" ]] ; then
    echo "#INSERT YOUR VALUES BETWEEN THE QUOTES AND SAVE FILE" > "${config_file}"
    echo "#To control file sync change 'sync_choice' to either Y or N" >> "${config_file}"
    echo "#Then change destination to the file path of the desired destination" >> "${config_file}"
    echo "sync_choice=\"$sync_choice\"" >> "${config_file}"
    echo "destination=\"$destination\"" >> "${config_file}"
    echo "" >> "${config_file}"
    echo "#If you want to sync an additional access file to an extra location choose Y or N and enter file path of destination below" >> "${config_file}"
    echo "derivative_choice=\"$derivative_choice\"" >> "${config_file}"
    echo "derivative_destination=\"$derivative_destination\"" >> "${config_file}"
    mate "$config_file"
    exit
fi

#Check if input exists

if [ ! -f "$file_input" ]; then
    _error_exit "Input could not be found. Please enter valid input."
fi


#create directory structure
orig_base=$(basename "$file_input")
deriv_name="${file_input%.*}.mov"
mp4_name="${file_input%.*}.mp4"
mediaid="${orig_base%.*}"
targetdirectory=$(dirname "${file_input}")
mkdir "${targetdirectory}/${mediaid}" || _error_exit "Directory already exists. Exiting..."
mkdir "${targetdirectory}/${mediaid}/metadata"
mkdir "${targetdirectory}/${mediaid}/logs"
mkdir "${targetdirectory}/${mediaid}/logs/fileMeta"
mkdir "${targetdirectory}/${mediaid}/objects"
mkdir "${targetdirectory}/${mediaid}/objects/access"

if [[ "${runtype}" = "crop" ]] ; then
    c=1
    while (( "$c" <= 1 )); do
    mpv --keep-open=yes --title="Preview" "$file_input" -lavfi-complex [vid1]split=2[aa][b],[aa]crop=iw:20:0:ih-20[aa1],[aa1]scale=iw:ih*20:flags=neighbor,setdar=4/3[aa2],[aa2]drawgrid=width=iw:height=ih/20:t=1:c=lightgreen[bb2],[bb2]scale=300:-1[aa3],[aa3]drawtext="/Library/Fonts/Andale\ Mono.ttf: \
    text="20": fontcolor=lightgreen: fontsize=12: x=10: y=0"[t],[t]drawtext="/Library/Fonts/Andale\ Mono.ttf: \
    text="15": fontcolor=lightgreen: fontsize=12: x=10: y=(h-text_h)*.26"[t2],[t2]drawtext="/Library/Fonts/Andale\ Mono.ttf: \
    text="10": fontcolor=lightgreen: fontsize=12: x=10: y=(h-text_h)*.52"[t3],[t3]drawtext="/Library/Fonts/Andale\ Mono.ttf: \
    text="5": fontcolor=lightgreen: fontsize=12: x=10: y=(h-text_h)*.79"[t4],[b][t4]overlay=10:10[vo]
    echo "try again? y or n"
    read crop_choice
if [[ "${crop_choice}" = "y" ]] ; then
        c=1
    else
    c=$(($c + 1))
fi

  done  
fi

#create metadata and derivative files
mediainfo --output=PBCore2 "$file_input" > "${targetdirectory}/${mediaid}/logs/fileMeta/${mediaid}_pbcoreinstantiation.xml"
if ! [ -e "$mp4_name" ] ; then
    ffmpeg -i "$file_input" -c:v libx264 -pix_fmt yuv420p -movflags +faststart -preset fast -crf 18 -c:a aac -ar 48k -b:a 128k -vf yadif=deint=1 "$mp4_name" 
fi
#sync access mp4 if selected
if [[ "${derivative_choice}" = "Y" ]] ; then
    echo -e "\033[1;32mSyncing access copy to  "$destination" \033[0m"
    rsync -Pa "$mp4_name" "$derivative_destination"
fi

#create checksum
md5deep -b "$file_input" > "${targetdirectory}/${mediaid}/metadata/${mediaid}.md5"

#move files
rsync "$file_input" "${targetdirectory}/${mediaid}/objects"
rsync --remove-source-files "$mp4_name" "${targetdirectory}/${mediaid}/objects/access"

package="${targetdirectory}/${mediaid}"

#Run Bagit
bagit baginplace "$package"

#sync AIP to destination
if [[ "${sync_choice}" = "Y" ]] ; then
    echo -e "\033[1;32mSyncing Files to  "$destination" \033[0m"
    rsync -Pa "$package" "$destination"

# check if destination is local. If local verify with bagit. 
    remote_test=$(echo "$destination" | grep "@")
    if [ -n "$remote_test" ] ; then
        echo -e "\033[1;32mAs Destination is not local audioaip is skipping bagit verification\033[0m"
        exit
    fi
    
    echo -e "\033[1;32mVerifying checksums of package \033[0m"
    bagit verifypayloadmanifests --excludehiddenfiles "$destination"/"${orig_base%.*}"
fi



